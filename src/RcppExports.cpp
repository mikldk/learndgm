// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// prufer_to_adjacency_matrix
Rcpp::IntegerMatrix prufer_to_adjacency_matrix(Rcpp::IntegerVector prufer);
RcppExport SEXP _learndgm_prufer_to_adjacency_matrix(SEXP pruferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type prufer(pruferSEXP);
    rcpp_result_gen = Rcpp::wrap(prufer_to_adjacency_matrix(prufer));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_new_all_tcherries_worker
Rcpp::List rcpp_new_all_tcherries_worker(const Rcpp::List& initial_models, const Rcpp::IntegerMatrix& kmin1_subsets_idx, int n, int n_unused, bool verbose);
RcppExport SEXP _learndgm_rcpp_new_all_tcherries_worker(SEXP initial_modelsSEXP, SEXP kmin1_subsets_idxSEXP, SEXP nSEXP, SEXP n_unusedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_models(initial_modelsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type kmin1_subsets_idx(kmin1_subsets_idxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_unused(n_unusedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_new_all_tcherries_worker(initial_models, kmin1_subsets_idx, n, n_unused, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mat_indices_to_vec_index
int mat_indices_to_vec_index(int row, int column, int n, int size_upper_tri);
RcppExport SEXP _learndgm_mat_indices_to_vec_index(SEXP rowSEXP, SEXP columnSEXP, SEXP nSEXP, SEXP size_upper_triSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type column(columnSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type size_upper_tri(size_upper_triSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_indices_to_vec_index(row, column, n, size_upper_tri));
    return rcpp_result_gen;
END_RCPP
}
// find_model_index
Rcpp::IntegerVector find_model_index(const Rcpp::List& models_haystack, const Rcpp::List& cliques_needle);
RcppExport SEXP _learndgm_find_model_index(SEXP models_haystackSEXP, SEXP cliques_needleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type models_haystack(models_haystackSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cliques_needle(cliques_needleSEXP);
    rcpp_result_gen = Rcpp::wrap(find_model_index(models_haystack, cliques_needle));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_learndgm_prufer_to_adjacency_matrix", (DL_FUNC) &_learndgm_prufer_to_adjacency_matrix, 1},
    {"_learndgm_rcpp_new_all_tcherries_worker", (DL_FUNC) &_learndgm_rcpp_new_all_tcherries_worker, 5},
    {"_learndgm_mat_indices_to_vec_index", (DL_FUNC) &_learndgm_mat_indices_to_vec_index, 4},
    {"_learndgm_find_model_index", (DL_FUNC) &_learndgm_find_model_index, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_learndgm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
